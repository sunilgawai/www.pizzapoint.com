// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  user_id            String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [user_id], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

enum Role {
  CUSTOMER
  EMPLOYEE
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role?     @default(CUSTOMER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  Review        Review[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

// Application

model Image {
  id         String   @id @default(uuid())
  image1     String?
  image2     String?
  image3     String?
  image4     String?
  product    Product? @relation(fields: [product_id], references: [id])
  product_id String?
}

model Review {
  id          String   @id @default(uuid())
  product     Product? @relation(fields: [product_id], references: [id])
  product_id  String?
  text        String
  likes       BigInt?
  review_by   User     @relation(fields: [reviewer_id], references: [id])
  reviewer_id String
}

model Category {
  id            String    @id @default(uuid())
  image         String
  title         String
  category_code String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  Product       Product[]
}

model Product {
  id           String   @id @default(uuid())
  name         String
  image        String?
  images       Image[]
  description  String
  prize        BigInt
  likes        BigInt
  inStock      Boolean?
  inStockCount Int?
  Reviews      Review[]
  category     Category @relation(fields: [category_id], references: [id])
  category_id  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
